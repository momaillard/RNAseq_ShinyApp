tVSD <- tVSD2App[,-c(19703,19704,19705,19706,19707)]
VSD.center <- scale(VSD.SOM, center = TRUE, scale = FALSE)
VSD.center <- scale(tVSD, center = TRUE, scale = FALSE)
mean(VSD.center[,1])
mean(VSD.center[,50])
max(VSD.center)
min(VSD.center)
rm(VSD.center)
tVSD.center.scaled <- scale(tVSD, center = TRUE, scale = TRUE)
tVSD.center <- scale(tVSD, center = TRUE, scale = FALSE)
annotation <-read.csv2("/home/bpmp/Documents/KPH/ShinyApp/data/annotation.csv")
View(annotation)
View(colData)
head(rownames(tVSD.center))
rm(tVSD)
head(rownames(tVSD.center))
head(colnames(tVSD.center))
colonnes <- gsub("gene.","",colnames(tVSD2App))
load(file = "/home/bpmp/Documents/KPH/ShinyApp/data/inputApp2.RData")
annotation <-read.csv2("/home/bpmp/Documents/KPH/ShinyApp/data/annotation.csv")
colonnes <- gsub("gene.","",colnames(tVSD2App))
tVSD <- tVSD2App
colnames(tVSD) <- colonnes
tVSD <- tVSD[,-c(19703,19704,19705,19706,19707)]
tVSD.center <- scale(tVSD, center = TRUE, scale = FALSE)
tVSD.center.scaled <- scale(tVSD, center = TRUE, scale = TRUE)
rm(tVSD)
View(annotation)
View(colData)
colDataLight <- colData[,c(2,3)]
save.image("~/Documents/KPH/ShinyApp/data/inputApp3.RData")
View(colData)
head(rownames(tVSD.center.scaled))
head(colnames(tVSD.center.scaled))
tail(colnames(tVSD.center.scaled))
annotation <-read.csv2("data/annotation.csv", row.names=1)
annotation <-read.csv2("/home/bpmp/Documents/KPH/ShinyApp/data/annotation.csv", row.names=1)
View(annotation)
save.image("~/Documents/KPH/ShinyApp/data/inputApp3.RData")
rm(annotation)
save.image("~/Documents/KPH/ShinyApp/data/inputApp3.RData")
annotation <-read.csv2("/home/bpmp/Documents/KPH/ShinyApp/data/annotation.csv", row.names=1)
save.image("~/Documents/KPH/ShinyApp/data/inputApp3.RData")
View(colData)
View(colDataLight)
write.csv2(colDataLight.csv,"coldataLight.csv")
write.csv2(colDataLight,"coldataLight.csv")
getwd()
ABC <- read.csv2(file = "/home/bpmp/Documents/KPH/ShinyApp/data/orderedColdataLight.csv", row.names = 1, header = TRUE)
View(ABC)
rm(ABC)
ABC <- read.csv2(file = "/home/bpmp/Documents/KPH/ShinyApp/data/orderedColdataLight.csv", row.names = 1, header = TRUE)
is.data.frame(ABC)
is.data.frame(colDataLight)
ABC <- read.csv2(file = "/home/bpmp/Documents/KPH/ShinyApp/data/orderedColdataLight.csv", row.names = 1, header = TRUE)
View(ABC)
liste <- "VIT_18s0089g01300;VIT_11s0016g05810;VIT_04s0008g04990"
tmpvector <- strsplit(liste, ";")
View(tmpvector)
geneSelect <- as.vector(tmpvector[[1]])
redgreen <- c("blue","black","yellow")
paletteLength <-256
pal <- colorRampPalette(redgreen)(paletteLength)
VSTselect <- tVSD.center.scaled[,geneSelect]
orderedColdataLight$Temps <- factor(orderedColdataLight$Temps,
levels = c("PRE","GrB","ColB","V4","V8","V12","V16","V20","V24","V28","V32","V36","V40","V44","V48","V52","V56","V60"))
ABC$Temps <- factor(ABC$Temps, levels = c("PRE","GrB","ColB","V4","V8","V12","V16","V20","V24","V28","V32","V36","V40","V44","V48","V52","V56","V60"))
myBreaks <- c(seq(min(VSTselect), 0, length.out = ceiling(paletteLength/2) + 1),
seq(max(VSTselect)/paletteLength, max(VSTselect), length.out = floor(paletteLength/2)))
output <- pheatmap(t(VSTselect), show_rownames = TRUE,
show_colnames = FALSE, cluster_cols = FALSE,
col = pal, annotation_col = ABC, breaks = myBreaks, cutree_rows = 2)
library(pheatmap)
output <- pheatmap(t(VSTselect), show_rownames = TRUE,
show_colnames = FALSE, cluster_cols = FALSE,
col = pal, annotation_col = ABC, breaks = myBreaks, cutree_rows = 2)
output <- pheatmap(t(VSTselect), show_rownames = TRUE,
show_colnames = FALSE, cluster_cols = FALSE, cluster_rows = FALSE,
col = pal, annotation_col = ABC, breaks = myBreaks, cutree_rows = 2)
View(ABC)
?seq
mySeq <- seq(from = 1, to = nrow(ABC), by = 1)
rownames(ABC) <- mySeq
View(ABC)
output <- pheatmap(t(VSTselect), show_rownames = TRUE,
show_colnames = FALSE, cluster_cols = FALSE,
col = pal, annotation_col = ABC, breaks = myBreaks, cutree_rows = 2)
View(colDataLight)
ABC <- read.csv2(file = "/home/bpmp/Documents/KPH/ShinyApp/data/orderedColdataLight.csv", row.names = 1, header = TRUE)
?order
myOrder <- rownames(ABC)
myOrder
VSTselect.ordered <- VSTselect [order(myOrder),]
myBreaks <- c(seq(min(VSTselect.ordered), 0, length.out = ceiling(paletteLength/2) + 1),
seq(max(VSTselect.ordered)/paletteLength, max(VSTselect.ordered), length.out = floor(paletteLength/2)))
output <- pheatmap(t(VSTselect.ordered), show_rownames = TRUE,
show_colnames = FALSE, cluster_cols = FALSE,
col = pal, annotation_col = ABC, breaks = myBreaks, cutree_rows = 2)
rownames(VSTselect.ordered)
order(myOrder)
VSTselect.ordered <- VSTselect [myOrder,]
output <- pheatmap(t(VSTselect.ordered), show_rownames = TRUE,
show_colnames = FALSE, cluster_cols = FALSE,
col = pal, annotation_col = ABC, breaks = myBreaks, cutree_rows = 2)
ABC$Temps <- factor(ABC$Temps, levels = c("PRE","GrB","ColB","V4","V8","V12","V16","V20","V24","V28","V32","V36","V40","V44","V48","V52","V56","V60"))
output <- pheatmap(t(VSTselect.ordered), show_rownames = TRUE,
show_colnames = FALSE, cluster_cols = FALSE,
col = pal, annotation_col = ABC, breaks = myBreaks, cutree_rows = 2)
biomass<-read.csv2("/home/bpmp/Documents/tmp/data_Gab/tmp_parsing/biomasse_GEAP149.csv",header=TRUE,row.names=1)
View(biomass)
View(biomass)
biomasse <- biomass[which(biomass$plante.A.1 != "OK" ),]
biomasse <- biomass[which(biomass$plante.B != "OK" ),]
biomasse
biomass <- read.csv2("/home/bpmp/Documents/tmp/data_Gab/tmp_parsing/biomasse_GEAP149.csv",header=TRUE,row.names=1)
biomasse <- biomass[which(biomass$plante.A.1 != "OK" ),]
biomasse <- biomasse[which(biomass$plante.B != "OK" ),]
View(biomasse)
biomass <- read.csv2("/home/bpmp/Documents/tmp/data_Gab/tmp_parsing/biomasse_GEAP149.csv",header=TRUE,row.names=1)
biomasse <- biomass[which(biomass$plante.A.1 != "OK" ),]
biomasse <- biomass[which(biomass$plante.A.1 == "OK" ),]
biomasse <- biomasse[which(biomass$plante.B == "OK" ),]
View(biomasse)
biomass <- read.csv2("/home/bpmp/Documents/tmp/data_Gab/tmp_parsing/biomasse_GEAP149.csv",header=TRUE,row.names=1)
biomasse <- biomass[which(biomass$plante.A.1 == "OK" ),]
biomasse <- biomasse[which(biomasse$plante.B == "OK" ),]
View(biomasse)
myD2 <- biomasse[,c(1,2,7,8)]
View(myD2)
View(myD2)
View(myD2)
colnames(myD2) <- c("sampleNames", "condition","planteA","planteB")
myD2$planteA <- as.numeric(myD2$planteA)
myD2$planteB <- as.numeric(myD2$planteB)
library(ggplot2)
attach(myD2)
library(ggplot2)
ggplot(myD2, aes(x=bloc_U1, y=bloc_U4, fill = condition)) +
geom_point()+
geom_smooth(method = lm, se = FALSE) +
xlim(0,6)+
ylim(0,6)+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
ggplot(myD2, aes(x=planteA, y=planteB, fill = condition)) +
geom_point()+
geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
my.lm<-lm(planteA~planteB)
summary(my.lm)
ggplot(myD2, aes(x=planteA, y=planteB, fill = condition)) +
geom_point()+
geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
#geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
ggplot(myD2, aes(x=planteA, y=planteB, fill = condition)) +
geom_point()+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
myD2$condition <- as.numeric(myD2$condition)
ggplot(myD2, aes(x=planteA, y=planteB, fill = condition)) +
geom_point()+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
biomass <- read.csv2("/home/bpmp/Documents/tmp/data_Gab/tmp_parsing/biomasse_GEAP149.csv",header=TRUE,row.names=1)
biomasse <- biomass[which(biomass$plante.A.1 == "OK" ),]
biomasse <- biomasse[which(biomasse$plante.B == "OK" ),]
myD2 <- biomasse[,c(1,2,7,8)]
colnames(myD2) <- c("sampleNames", "condition","planteA","planteB")
myD2$planteA <- as.numeric(myD2$planteA)
myD2$planteB <- as.numeric(myD2$planteB)
myD2$condition <- as.factor(myD2$condition)
library(ggplot2)
ggplot(myD2, aes(x=planteA, y=planteB, fill = condition)) +
geom_point()+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
ggplot(myD2, aes(x=planteA, y=planteB,)) +
geom_point( fill = condition)+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
ggplot(myD2, aes(x=planteA, y=planteB)) +
geom_point( fill = condition)+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
geom_point( aes(fill = condition))+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
geom_point( aes(color = condition))+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
geom_point( aes(color = condition))+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
scale_color_manual(values=c('royalblue4', 'firebrick4'))
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
geom_point( aes(color = condition))+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
scale_color_manual(values=c('royalblue1', 'firebrick4'))
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
geom_point( aes(color = condition))+
#geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
scale_color_manual(values=c('royalblue1', 'firebrick4'))+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
attach(myD2)
summary(my.lm)
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
geom_point( aes(color = condition))+
geom_smooth(method = lm, se = FALSE) +
#xlim(0,6)+
#ylim(0,6)+
scale_color_manual(values=c('royalblue1', 'firebrick4'))+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
geom_point( aes(color = condition))+
#geom_smooth(method = lm, se = FALSE) +
xlim(0,6.5)+
ylim(0,6.5)+
scale_color_manual(values=c('royalblue1', 'firebrick4'))+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse U1 vs U4, blue line = lm(Y~X), dashed line y = x, R2 = 0.21 ")
summary(my.lm)
View(my.lm)
ggplot(myD2, aes(x=planteA, y=planteB, group = condition)) +
geom_point( aes(color = condition))+
#geom_smooth(method = lm, se = FALSE) +
xlim(0,6.5)+
ylim(0,6.5)+
scale_color_manual(values=c('royalblue1', 'firebrick4'))+
geom_abline(intercept = 0, slope = 1, linetype="dashed")+
ggtitle("Biomasse plante1 vs plante2 meme Rtube, dashed line y = x, R2 = 0.52 ")
load("~/Documents/KPH/ShinyApp/data/inputApp3.RData")
colonnes <- gsub("gene.","",colnames(tVSD2App))
head(colnames(tVSD2App))
tail(colnames(tVSD2App))
colnames(tVSD2App) <- colonnes
head(colnames(tVSD2App))
tail(colnames(tVSD2App))
save.image("~/Documents/KPH/ShinyApp/data/inputApp4.RData")
5.5*7
install.packages('keras')
library(tensorflow)
library(keras)
install_keras()
Y
install_tensorflow()
data<-dataset_mnist()
View(data)
data$train
data$train
data$train$x
data$train$x$1
str(data)
data$train$x[1]
data$train$x[2]
data$train$x[[2]]
data$train$x[[50]]
data$train$x[1,,]
data$train$x[5,,]
data$train$x[11,,]
data$train$x[50,,]
data$train$x[70,,]
train_x<-data$train$x
train_y<-data$train$y
test_x<-data$test$x
test_y<-data$test$y
dim(train_x)
?prod
pord(dim(train_x))
prod(dim(train_x))
60000 * 28 * 28
5*5*5
prod(c(5,5,5))
dim(train_x)[-1]
train_x <- array(train_x, dim = c(dim(train_x)[1], prod(dim(train_x)[-1]))) / 255
train_x
test_x <- array(test_x, dim = c(dim(test_x)[1], prod(dim(test_x)[-1]))) / 255
28*28
image(matrix(train_x[2,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(train_x[50,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(train_x[70,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(train_x[67,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
train_y
train_y_cat<-to_categorical(train_y,10)
test_y_cat<-to_categorical(test_y,10)
View(test_y_cat)
image(matrix(train_x[,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(train_x[71,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(train_x[61,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
train_y[71]
train_y[61]
View(train_y_cat)
image(matrix(train_x[62,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
train_y <- train_y_cat
test_y <- test_y_cat
train_y
model %>%
layer_dense(units = 784, input_shape = 784) %>%
layer_dropout(rate=0.4)%>%
layer_activation(activation = 'relu') %>%
layer_dense(units = 10) %>%
layer_activation(activation = 'softmax')
model <- keras_model_sequential()
model %>%
layer_dense(units = 784, input_shape = 784) %>%
layer_dropout(rate=0.4)%>%
layer_activation(activation = 'relu') %>%
layer_dense(units = 10) %>%
layer_activation(activation = 'softmax')
model
28*28
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = 'adam',
metrics = c('accuracy')
)
learning_history <- model %>% fit(train_x, train_y, epochs = 30, batch_size = 1000)
loss_and_metrics <- model %>% evaluate(test_x, test_y, batch_size = 128)
summary(model)
plot(learning_history)
View(learning_history)
loss_and_metrics
prediction <- model %>% predict(test_x)
image(as.matrix(prediction[1:5,]))
prediciton
prediction[1:50,]
?predict
length(test_y)
length(train_y)
image(as.matrix(prediction[1:50,]))
str(prediction)
image(matrix(test_x[62,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[1,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[2,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[3,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[4,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[5,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[6,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[8,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
9.998530e-01
image(matrix(test_x[13,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
test_y[13]
test_y[14]
test_y
image(matrix(test_x[17,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[95,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[88,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[99,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
image(matrix(test_x[67,],28,28,byrow=T), axes = FALSE,col=gray.colors(255))
data("iris")
library(ggplot2)
ggpairs(iris,aes(colour = Species, alpha = 0.4))
ggpairs(iris, aes(colour = Species, alpha = 0.4))
??ggpairs
install.package(ggpubr)
install.packages(ggpubr)
install.packages("ggpubr")
install.packages("ggpubr")
library(ggpubr)
ggpairs(iris, aes(colour = Species, alpha = 0.4))
ggpaired(iris, aes(colour = Species, alpha = 0.4))
ggplot
ggpaired
iris
x_iris <- iris %>% select(-Species) %>% as.matrix %>% scale
iris
x_iris <- iris %>% select(-Species) %>% as.matrix %>% scale
library(dplyr)
e
x_iris <- iris %>% select(-Species) %>% as.matrix %>% scale
iris
x_iris
set.seed(0)
ntest<-15
train_x
test.index <-
tibble(row_number =1:nrow(iris),Species = iris$Species) %>%
group_by(Species) %>%
sample_n(ntest) %>%
pull(row_number)
?tibble
tibble(row_number =1:nrow(iris),Species = iris$Species)
tibble(row_number =1:nrow(iris),Species = iris$Species) %>%
group_by(Species)
?sample_n
View(x_iris)
View(x_iris)
View(x_iris)
train.index <- (1:nrow(iris))[-test.index]
x_iris_train<-x_iris[train.index,]
y_iris_train<-y_iris[train.index,]
x_iris_test<-x_iris[test.index,]
iris$Species
as.integer(iris$Species)
y_iris <- to_categorical(as.integer(iris$Species)-1)
View(y_iris)
y_iris <- to_categorical(as.integer(iris$Species))
View(y_iris)
y_iris <- to_categorical(as.integer(iris$Species)-1)
x_iris_train<-x_iris[train.index,]
y_iris_train<-y_iris[train.index,]
x_iris_test<-x_iris[test.index,]
y_iris_test<-y_iris[test.index,]
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = 'adam',
metrics = c('accuracy')
)
model<- keras_model_sequential()
model %>%
layer_dense(units = 4, input_shape = 4) %>%
layer_dropout(rate=0.1)%>%
layer_activation(activation = 'relu') %>%
layer_dense(units = 3) %>%
layer_activation(activation = 'softmax')
model %>% compile(
loss = 'categorical_crossentropy',
optimizer = 'adam',
metrics = c('accuracy')
)
learning_history <- model %>% fit(x_iris_train, y_iris_train, epochs = 200, validation_split=0.0)
loss_and_metrics <- model %>% evaluate(x_iris_test, y_iris_test)
loss_and_metrics
learning_history <- model %>% fit(x_iris_train, y_iris_train, epochs = 1000, validation_split=0.0)
loss_and_metrics
estimation <- apply(predict(model,x_iris_test),1,which.max)
estimation
?apply
predict(model,x_iris_test)
(predict(model,x_iris_test)
y_iris_test
truth <- apply(y_iris_test,1,which.max)
table(estimation, truth)
model_autoencoder <- keras_model_sequential()
model_autoencoder %>%
layer_dense(units = 2, activation = 'linear',input_shape = ncol(x_iris),name = "inter_layer") %>%
layer_dense(units = 4, activation = 'linear')
model_autoencoder %>%
layer_dense(units = 2, activation = 'linear',input_shape = ncol(x_iris),name = "inter_layer") %>%
layer_dense(units = 4, activation = 'linear')
rm(model_autoencoder)
model_autoencoder <- keras_model_sequential()
model_autoencoder %>%
layer_dense(units = 2, activation = 'linear',input_shape = ncol(x_iris),name = "inter_layer") %>%
layer_dense(units = 4, activation = 'linear')
model_autoencoder %>% compile(
loss = 'mse',
optimizer = 'adam',
metrics = 'mse'
)
model_autoencoder
model_autoencoder %>% fit(
x_iris_train,
x_iris_train,
epochs = 1000,
batch_size = 16,
shuffle = TRUE,
validation_split = 0.1,
)
model_projection = keras_model(inputs = model_autoencoder$input, outputs = get_layer(model_autoencoder)
12*12
18*100
1800/60
1902.43+1571.19+1715.69
5189.31/3
42.96*14.26
load("/home/bpmp/Documents/KPH/rnaSeq/deseq/FilteredNormalizedCountFromDeseqSweetK.RData")
View(colData)
View(dds)
View(colData)
setwd("/home/bpmp/Documents/KPH/ShinyApp")
library(shiny); runApp('runApp_withSGS.R')
